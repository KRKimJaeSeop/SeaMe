fileFormatVersion: 2
guid: 48432be9f833e8246b204afb0be42355
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst __UnityEngine__ = require(\"UnityEngine\");\r\nconst
    UnityEngine_1 = require(\"UnityEngine\");\r\nconst UnityEngine_UI_1 = require(\"UnityEngine.UI\");\r\nconst
    ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst ScreenShotController_1
    = require(\"./ScreenShotController\");\r\nconst ScreenShotModeManager_1 = require(\"./ScreenShotModeManager\");\r\nclass
    UIScreenShotController extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n   
    constructor() {\r\n        super(...arguments);\r\n        /*Player Layer Setting*/\r\n       
    this.playerLayer = 0;\r\n        this.LAYER = {\r\n            everything: -1,\r\n           
    nothing: 0,\r\n            UI: 5,\r\n        };\r\n        // Data\r\n       
    this.TOAST_MESSAGE = {\r\n            feedUploading: \"Uploading...\",\r\n           
    feedCompleted: \"Done\",\r\n            feedFailed: \"Failed\",\r\n           
    screenShotSaveCompleted: \"Saved!\"\r\n        };\r\n        //Enables/disables
    MeshRender for background gameobjects.\r\n        // SetBackgroundActive(active:
    boolean) {\r\n        //     // Background canvas (checkered pattern) disabled/enabled\r\n       
    //     if (active) {\r\n        //         this.backgroundCanvas.gameObject.SetActive(!active);\r\n       
    //         //Layer Settings to Everything\r\n        //         this.screenShotModeManager.GetSelfieCamera().cullingMask
    = this.LAYER.everything;\r\n        //         this.screenShotModeManager.GetZepetoCamera().cullingMask
    = this.LAYER.everything;\r\n        //     } else {\r\n        //         this.backgroundCanvas.gameObject.SetActive(!active);\r\n       
    //         //Change the Layer setting to only include nothing, player, and UI
    Layers\r\n        //         this.screenShotModeManager.GetSelfieCamera().cullingMask
    = this.LAYER.nothing | 1 << this.playerLayer | 1 << this.LAYER.UI;\r\n       
    //         this.screenShotModeManager.GetZepetoCamera().cullingMask = this.LAYER.nothing
    | 1 << this.playerLayer | 1 << this.LAYER.UI;\r\n        //     }\r\n       
    // }\r\n    }\r\n    Awake() {\r\n        //this.isBackgroundOn = true;\r\n       
    this.zepetoScreenShotCanvas.sortingOrder = 1;\r\n        this.waitForSecond =
    new UnityEngine_1.WaitForSeconds(1);\r\n        this.screenShotPanel.gameObject.SetActive(false);\r\n       
    //this.backgroundCanvas.gameObject.SetActive(false);\r\n        this.screenShotResultPanel.gameObject.SetActive(false);\r\n       
    this.screenShotResultBackground.gameObject.SetActive(false);\r\n        //this.gestureListView.gameObject.SetActive(false);\r\n       
    this.screenShot = this.screenShotModeModule.GetComponent($typeof(ScreenShotController_1.default));\r\n       
    this.screenShotModeManager = this.screenShotModeModule.GetComponent($typeof(ScreenShotModeManager_1.default));\r\n       
    this.playerLayer = this.screenShotModeManager.GetPlayerLayer();\r\n        //this.viewChangeImage
    = this.viewChangeButton.GetComponent<Image>();\r\n        //this.backgroundOnOffImage
    = this.backgroundOnOffButton.GetComponent<Image>();\r\n    }\r\n    Start() {\r\n       
    // SafeArea Settings\r\n        let safeArea = UnityEngine_1.Screen.safeArea;\r\n       
    let newAnchorMin = safeArea.position;\r\n        let newAnchorMax = __UnityEngine__.Vector2.op_Addition(safeArea.position,
    safeArea.size);\r\n        newAnchorMin.x /= UnityEngine_1.Screen.width;\r\n       
    newAnchorMax.x /= UnityEngine_1.Screen.width;\r\n        newAnchorMin.y /= UnityEngine_1.Screen.height;\r\n       
    newAnchorMax.y /= UnityEngine_1.Screen.height;\r\n        let rect = this.safeAreaObject.GetComponent($typeof(UnityEngine_1.RectTransform));\r\n       
    rect.anchorMin = newAnchorMin;\r\n        rect.anchorMax = newAnchorMax;\r\n       
    /** Screenshot mode\r\n         *  1. Btn: Select Screenshot Mode - Set to Screenshot
    Mode and enable ZEPETO Camera by default.\r\n         *  2. Btn: Switch view
    - Switch first-person/third-person camera according to current settings.\r\n        
    *  3. Btn: Background ON/OFF - Button to turn the background on/off .\r\n        
    *  4. Btn: Exit Screenshot Mode - Exits Screenshot Mode.\r\n         *  5. Btn:
    Take a screenshot - Take a screenshot and display the screenshot results.\r\n        
    */\r\n        // 1. Btn: Select Screenshot Mode\r\n        this.screenShotModeButton.onClick.AddListener(()
    => {\r\n            this.screenShotModeButton.gameObject.SetActive(false);\r\n           
    this.screenShotPanel.gameObject.SetActive(true);\r\n            //Initialize
    the camera view to the default ZEPETO camera\r\n            //this.isThirdPersonView
    = true;\r\n            //this.backgroundCanvas.worldCamera = this.screenShotModeManager.GetZepetoCamera();\r\n           
    this.screenShotModeManager.StartScreenShotMode();\r\n        });\r\n        //
    2. Btn: Switch Views\r\n        // this.viewChangeButton.onClick.AddListener(()
    => {\r\n        //     if (this.isThirdPersonView) {\r\n        //         this.viewChangeImage.sprite
    = this.selfiViewSprite;\r\n        //         this.backgroundCanvas.worldCamera
    = this.screenShotModeManager.GetSelfieCamera();\r\n        //         this.screenShotModeManager.SetSelfieCameraMode();\r\n       
    //         this.gestureButton.gameObject.SetActive(false);\r\n        //        
    this.gestureListView.gameObject.SetActive(false);\r\n        //         this.isThirdPersonView
    = false;\r\n        //     } else {\r\n        //         this.viewChangeImage.sprite
    = this.thirdPersonViewSprite;\r\n        //         this.backgroundCanvas.worldCamera
    = this.screenShotModeManager.GetZepetoCamera();\r\n        //         this.screenShotModeManager.SetZepetoCameraMode();\r\n       
    //         this.gestureButton.gameObject.SetActive(true);\r\n        //        
    this.isThirdPersonView = true;\r\n        //     }\r\n        // });\r\n       
    // 3. Btn: Background ON/OFF\r\n        // this.backgroundOnOffButton.onClick.AddListener(()
    => {\r\n        //     if (this.isBackgroundOn) {\r\n        //         this.backgroundOnOffImage.sprite
    = this.backgroundOffSprite;\r\n        //         this.SetBackgroundActive(!this.isBackgroundOn);\r\n       
    //         this.isBackgroundOn = false;\r\n        //     } else {\r\n       
    //         this.backgroundOnOffImage.sprite = this.backgroundOnSprite;\r\n       
    //         this.SetBackgroundActive(!this.isBackgroundOn);\r\n        //        
    this.isBackgroundOn = true;\r\n        //     }\r\n        // });\r\n       
    // 4. Btn: Exit Screenshot Mode\r\n        this.screenShotModeExitButton.onClick.AddListener(()
    => {\r\n            // if (!this.isBackgroundOn) {\r\n            //     this.SetBackgroundActive(true);\r\n           
    //     this.isBackgroundOn = true;\r\n            // }\r\n            this.screenShotModeButton.gameObject.SetActive(true);\r\n           
    this.screenShotPanel.gameObject.SetActive(false);\r\n            // this.gestureButton.gameObject.SetActive(true);\r\n           
    // this.screenShotModeManager.ExitScreenShotMode(this.isThirdPersonView);\r\n       
    });\r\n        // 5. Btn: Take a screenshot\r\n        this.shootScreenShotButton.onClick.AddListener(()
    => {\r\n            // Take a screenshot\r\n            this.screenShot.TakeScreenShot(true);
    //this.isBackgroundOn\r\n            // Activating the Screenshot Results Screen\r\n           
    this.screenShotResultBackground.gameObject.SetActive(true);\r\n            this.screenShotResultPanel.gameObject.SetActive(true);\r\n           
    // Activating the Screenshot Feed Button\r\n            this.createFeedButton.gameObject.SetActive(true);\r\n       
    });\r\n        /** Screenshot Result\r\n         *  1. Btn: Save Screenshot -
    Save the screenshot to the gallery.\r\n         *  2. Btn: Screenshot sharing
    - The ability to share screenshots.\r\n         *  3. Btn: Upload Feed - The
    ability to upload to a feed.\r\n         *  4. Btn: Exit Screenshot Results Screen
    - Close the Screenshot Results screen.\r\n        */\r\n        // 1. Btn: Save
    Screenshot\r\n        this.saveButton.onClick.AddListener(() => {\r\n           
    this.screenShot.SaveScreenShot();\r\n            this.StartCoroutine(this.ShowToastMessage(this.TOAST_MESSAGE.screenShotSaveCompleted));\r\n       
    });\r\n        // 2. Btn: Share Screenshots\r\n        this.shareButton.onClick.AddListener(()
    => {\r\n            this.screenShot.ShareScreenShot();\r\n        });\r\n       
    // 3. Btn: Upload Feed\r\n        this.createFeedButton.onClick.AddListener(()
    => {\r\n            this.screenShot.CreateFeedScreenShot();\r\n            this.StartCoroutine(this.ShowToastMessage(this.TOAST_MESSAGE.feedUploading));\r\n       
    });\r\n        // 4. Btn: Close the Screenshot Results Screen\r\n        this.screenShotResultExitButton.onClick.AddListener(()
    => {\r\n            this.screenShotResultBackground.gameObject.SetActive(false);\r\n           
    this.screenShotResultPanel.gameObject.SetActive(false);\r\n        });\r\n       
    /** Gesture\r\n         *  1. Btn: Gesture - Opens the gesture list view.\r\n        
    *  2. Btn: Gesture Exit - Close the gesture list view.\r\n         */\r\n       
    // 1. Btn: Gesture\r\n        // this.gestureButton.onClick.AddListener(() =>
    {\r\n        //     this.gestureListView.SetActive(true);\r\n        // });\r\n       
    // // 2. Btn: Gesture Exit\r\n        // this.gestureExitButton.onClick.AddListener(()
    => {\r\n        //     this.gestureListView.SetActive(false);\r\n        // })\r\n   
    }\r\n    // Displays the screenshot results screen.\r\n    ShowCreateFeedResult(result)
    {\r\n        if (result) {\r\n            this.createFeedButton.gameObject.SetActive(false);\r\n           
    this.StartCoroutine(this.ShowToastMessage(this.TOAST_MESSAGE.feedCompleted));\r\n       
    }\r\n        else {\r\n            this.StartCoroutine(this.ShowToastMessage(this.TOAST_MESSAGE.feedFailed));\r\n       
    }\r\n    }\r\n    // The screenshot results screen shows a toast message when
    saving and uploading feeds.\r\n    *ShowToastMessage(text) {\r\n        yield
    this.waitForSecond;\r\n        let toastMessage = null;\r\n        if (text ==
    this.TOAST_MESSAGE.feedFailed)\r\n            toastMessage = UnityEngine_1.GameObject.Instantiate(this.toastErrorMessage);\r\n       
    else\r\n            toastMessage = UnityEngine_1.GameObject.Instantiate(this.toastSuccessMessage);\r\n       
    toastMessage.transform.SetParent(this.screenShotResultPanel.transform);\r\n       
    toastMessage.GetComponentInChildren($typeof(UnityEngine_UI_1.Text)).text = text;\r\n       
    UnityEngine_1.GameObject.Destroy(toastMessage, 1);\r\n    }\r\n}\r\nexports.default
    = UIScreenShotController;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVUlTY3JlZW5TaG90Q29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlVJU2NyZWVuU2hvdENvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQW1JO0FBQ25JLG1EQUFvRDtBQUNwRCxpREFBcUQ7QUFDckQsaUVBQTBEO0FBQzFELG1FQUE0RDtBQUU1RCxNQUFxQixzQkFBdUIsU0FBUSxxQ0FBcUI7SUFBekU7O1FBeURJLHdCQUF3QjtRQUNoQixnQkFBVyxHQUFXLENBQUMsQ0FBQztRQUVoQyxVQUFLLEdBQUc7WUFDSixVQUFVLEVBQUUsQ0FBQyxDQUFDO1lBQ2QsT0FBTyxFQUFFLENBQUM7WUFDVixFQUFFLEVBQUUsQ0FBQztTQUNSLENBQUM7UUFFRixPQUFPO1FBQ1Asa0JBQWEsR0FBRztZQUNaLGFBQWEsRUFBRSxjQUFjO1lBQzdCLGFBQWEsRUFBRSxNQUFNO1lBQ3JCLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLHVCQUF1QixFQUFFLFFBQVE7U0FDcEMsQ0FBQztRQXVMRix5REFBeUQ7UUFDekQseUNBQXlDO1FBQ3pDLGdFQUFnRTtRQUNoRSxvQkFBb0I7UUFDcEIsK0RBQStEO1FBQy9ELHlDQUF5QztRQUN6Qyw0RkFBNEY7UUFDNUYsNEZBQTRGO1FBQzVGLGVBQWU7UUFDZiwrREFBK0Q7UUFDL0Qsb0ZBQW9GO1FBQ3BGLHNJQUFzSTtRQUN0SSxzSUFBc0k7UUFDdEksUUFBUTtRQUNSLElBQUk7SUFDUixDQUFDO0lBbk1HLEtBQUs7UUFDRCw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLDRCQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFM0MsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pELG9EQUFvRDtRQUNwRCxJQUFJLENBQUMs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","assetPath":"Assets/Resources/ScreenShot/ScreenShotScripts/UIScreenShotController.ts","manifest":{"properties":[{"assembly":"UnityEngine.CoreModule","name":"safeAreaObject","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UIModule","name":"zepetoScreenShotCanvas","type":"UnityEngine.Canvas","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Panels\""]}]},{"assembly":"UnityEngine.UI","name":"screenShotPanel","type":"UnityEngine.UI.Image","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"screenShotResultPanel","type":"UnityEngine.UI.Image","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"screenShotModeButton","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Screenshot
    Mode\""]}]},{"assembly":"UnityEngine.UI","name":"shootScreenShotButton","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"screenShotModeExitButton","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"saveButton","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Screenshot
    Result\""]}]},{"assembly":"UnityEngine.UI","name":"shareButton","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"createFeedButton","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"screenShotResultExitButton","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"screenShotResultBackground","type":"UnityEngine.UI.Image","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"toastSuccessMessage","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Toast
    Message\""]}]},{"assembly":"UnityEngine.CoreModule","name":"toastErrorMessage","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"screenShotModeModule","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"ScreenShot
    Mode Module\""]}]},{"assembly":"","name":"LAYER","type":"__object","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"","name":"TOAST_MESSAGE","type":"__object","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"UIScreenShotController","description":""},"isCompiled":true}'
  typescriptHash: bcacdfb16ead7a71f53915ce1f9bc274
  onlyWriteTrigger: 0
